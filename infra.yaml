Resources:
  #criando a  VPC:
  myvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC 
    
  # criação internet Gateway:      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: myvpc
  
  #Adicionando internet gateway na VPC   
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myvpc
      InternetGatewayId: !Ref InternetGateway
      
  #Criando subnet Publica 
  mySubnetPubli:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myvpc
      CidrBlock: 10.100.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '' ]

  #Criando Subnet Privada
  mySybnetPriv:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '' ]
      VpcId: !Ref myvpc
      CidrBlock: 10.100.2.0/24

  #Criando Elastic Ip 
  NATGatewayElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: myvpc

  #Criando o NatGateway
  myGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayElasticIp.AllocationId 
      SubnetId: !Ref mySubnetPubli

  #criado route table privada
  PrivadaRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref myvpc
        Tags:
          - Key: Name
            Value: privada

  #criado route  privada conectando rede no nat GW
  PrivadaRouteTable1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivadaRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref myGateway

  #criado route table PUBLICA
  PublicaRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref myvpc
        Tags:
          - Key: Name
            Value: publica

  #criado route  publica conectando rede no nat GW
  PublicaRouteTable1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicaRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  #Associando a tabela de rotas privada  com a subnet privada
  PrivadaRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivadaRouteTable
        SubnetId: !Ref mySybnetPriv

  #Associando a tabela de rotas publica   com a subnet publica
  PublicaRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicaRouteTable
        SubnetId: !Ref mySubnetPubli

  #Criando Securitygroup web
  NovoWebSecurityGroupWeb:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: WebServer
        GroupDescription: Sec Group para os web servers
        VpcId: !Ref myvpc
        SecurityGroupIngress:
          - 
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - 
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - 
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: SecurityGroupWeb

  #Criando Securitygroup DataBase
  NovoWebSecurityGroupDatabase:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: DataBase
        GroupDescription: Sec Group para banco de dados
        VpcId: !Ref myvpc
        SecurityGroupIngress:
          - 
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - 
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: SecurityGroupDataBase
  #Criando Volume
  DBVolume:
      Type: AWS::EC2::Volume
      DeletionPolicy: Snapshot
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '' ]
        Size: 64
        Tags:
          -
            Key: Name
            Value: Data-Volume
        VolumeType: gp2

  #Criando Instancia DB
  NovaDbInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref mySybnetPriv
      BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs: 
              Volumetype: gp2
              VolumeSize: 24
                      
      KeyName: marcelo.pem
      ImageId: ami-0ab4d1e9cf9a1215a
      InstanceType: t2.nano
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoWebSecurityGroupDatabase
      Volumes:
        -
          Device: "/dev/sdf" 
          VolumeId: !Ref DBVolume
          
  #Criando Elastic Ip  
  NovoElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: myvpc
      InstanceId: !Ref NovaWebInstance
 


  #Criando web Instance
  NovaWebInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      InstanceType: t2.nano
      ImageId: ami-0b418580298265d5c
      KeyName: aws-class-2
      Monitoring: true
      SecurityGroupIds:
        - !Ref NovoWebSecurityGroupWeb

      UserData: !Base64 |
        #!/bin/bash -ex
        sudo apt update -y
        sudo apt install nginx - y
        sudo systectl start nginx.service 
      Tags:
        -
         Key: Name
         Value: !Sub ${AWS::StackName}-WEB
      Volumes:
        -
          Device: "/dev/sdc" 
          VolumeId: !Ref  DBVolume
      SubnetId: !Ref mySubnetPubli